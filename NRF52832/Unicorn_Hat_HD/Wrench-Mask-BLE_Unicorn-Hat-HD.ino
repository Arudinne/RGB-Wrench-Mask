/*  Wrench Mask - BLE Version (NRF52832)
 *  
 *  Hardware Used:
 *  Adafruit Feather NRF52
 *  Pimoroni Unicorn Hat HD
 *  
 *  by Brandon C. Allen 
 *  
 *  Based on the bleuart example from AdaFruit:
 *  https://github.com/adafruit/Adafruit_nRF52_Arduino/blob/master/libraries/Bluefruit52Lib/examples/Peripheral/bleuart/bleuart.ino
 *  
*/

// Byte Masks for facial expressions

#define ROW_SIZE 16

//  X_X - face001

byte face001_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0},
  {0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0},
  {0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
  {0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face001_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0},
  {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0},
  {0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0},
  {0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0},
  {0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0},
  {0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// >_< - Face002

byte face002_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face002_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// ^_^ - Face003

byte face003_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0},
  {0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0},
  {0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0},
  {0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face003_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0},
  {0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0},
  {0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// @_@ - Face004

byte face004_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face004_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// /_\ - Face005

byte face005_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face005_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// ?_? - Face006

byte face006_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face006_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// O_o - Face007

byte face007_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face007_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// \_/ - Face008

byte face008_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face008_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// Z_Z - Face009

byte face009_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face009_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// #_# - Face010

byte face010_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face010_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// =_= - Face011

byte face011_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face011_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// ~_^ - Face012

byte face012_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face012_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// 9_9 - Face013

byte face013_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face013_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// !_! - Face014

byte face014_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face014_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// *_* - Face015

byte face015_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face015_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// `_` - Face016

byte face016_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face016_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
 
// ;_; - Face017

byte face017_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face017_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// .)_.) - Face018

byte face018_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face018_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// (._(. - Face019

byte face019_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face019_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// o_O - Face020

byte face020_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face020_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// ._. - Face021

byte face021_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face021_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// ⌐_⌐ - Face022

byte face022_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face022_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// <3_<3 - Face023

byte face023_Left [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

byte face023_Right [][ROW_SIZE] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

// Umbrella Logo

byte face024_Red [][ROW_SIZE] = {
  {0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
  {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
  {0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0},
  {0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0},
  {0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0},
  {0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0},
  {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
  {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0},
};

byte face024_White [][ROW_SIZE] = {
  {0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
  {0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
  {0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0},
  {1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1},
  {0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0},
  {0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0},
  {1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1},
  {0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0},
  {0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
  {0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
};

#include <bluefruit.h>
#include <SPI.h>
#include <Unicorn_Hat_HD.h>

const int slaveSelectPinA = 7;
const int slaveSelectPinB = 27;

// BLE Service
BLEDis  bledis;
BLEUart bleuart;
BLEBas  blebas;

// Define the matrix CS pins
Unicorn_Hat_HD lefteye = Unicorn_Hat_HD(slaveSelectPinA);
Unicorn_Hat_HD righteye = Unicorn_Hat_HD(slaveSelectPinB);

// Define initial facial expression
char FaceMode = 1;  

// Define color parameters
uint32_t colorRed = 0xFF0000;
uint32_t colorGreen = 0x00FF00;
uint32_t colorBlue = 0x0000FF;
uint32_t colorWhite = 0xFFFFFF;

// Define initial color
uint32_t color = colorWhite;

// Define Variables for blinking the LEDs
unsigned long currentMillis = 0;
unsigned long previousMillis = 0;
int ledState = 0; //
long OnTime = 6000; // milliseconds of on-time
long OffTime = 70; // milliseconds of off-time
byte EyeBrightness = 50;

// Initial boolean variables for face status checks when switching faces
// Face001
bool Face001RunningCheck = false;
bool Face001BlinkCheck = false;
// Face002 
bool Face002RunningCheck = false;
bool Face002BlinkCheck = false;
// Face003
bool Face003RunningCheck = false;
bool Face003BlinkCheck = false; 
// Face004
bool Face004RunningCheck = false;
bool Face004BlinkCheck = false;
// Face005
bool Face005RunningCheck = false;
bool Face005BlinkCheck = false;
// Face006 
bool Face006RunningCheck = false;
bool Face006BlinkCheck = false;
// Face007
bool Face007RunningCheck = false;
bool Face007BlinkCheck = false; 
// Face008
bool Face008RunningCheck = false;
bool Face008BlinkCheck = false;
// Face009
bool Face009RunningCheck = false;
bool Face009BlinkCheck = false; 
// Face010
bool Face010RunningCheck = false;
bool Face010BlinkCheck = false;
// Face011
bool Face011RunningCheck = false;
bool Face011BlinkCheck = false;
// Face012
bool Face012RunningCheck = false;
bool Face012BlinkCheck = false;
// Face013
bool Face013RunningCheck = false;
bool Face013BlinkCheck = false;
// Face014
bool Face014RunningCheck = false;
bool Face014BlinkCheck = false;
// Face015
bool Face015RunningCheck = false;
bool Face015BlinkCheck = false;
// Face016
bool Face016RunningCheck = false;
bool Face016BlinkCheck = false;
// Face017
bool Face017RunningCheck = false;
bool Face017BlinkCheck = false;
// Face018
bool Face018RunningCheck = false;
bool Face018BlinkCheck = false;
// Face019
bool Face019RunningCheck = false;
bool Face019BlinkCheck = false;
// Face020
bool Face020RunningCheck = false;
bool Face020BlinkCheck = false;
// Face021
bool Face021RunningCheck = false;
bool Face021BlinkCheck = false;
// Face022
bool Face022RunningCheck = false;
bool Face022BlinkCheck = false;
// Face023
bool Face023RunningCheck = false;
bool Face023BlinkCheck = false;
// Face024
bool Face024RunningCheck = false;

bool drawGivenMask(int row, int col, byte mask[][ROW_SIZE])
{
  col = col % ROW_SIZE;
  if (mask[row][col] & 1){
    return true;
  }
  return false;
}

void setup()
{
  lefteye.begin();
  righteye.begin();
  lefteye.setBrightness(EyeBrightness);
  righteye.setBrightness(EyeBrightness);
  lefteye.show(); 
  righteye.show();
  
  Serial.begin(115200); // Enable Serial for debugging purposes
  Serial.println("=======================================");
  Serial.println("|| Opening Serial port for Debugging ||");
  Serial.println("||     Begin Wrnech Mask Program     ||");
  Serial.println("=======================================");

  //Configure BLE
  Bluefruit.begin();
  // Set max power. Accepted values are: -40, -30, -20, -16, -12, -8, -4, 0, 4
  Bluefruit.setTxPower(4);
  Bluefruit.setName("Wrench Mask");
  Bluefruit.setConnectCallback(connect_callback);
  Bluefruit.setDisconnectCallback(disconnect_callback);

  // Configure and Start Device Information Service
  bledis.setManufacturer("Adafruit Industries");
  bledis.setModel("Bluefruit Feather52");
  bledis.begin();

  // Configure and Start BLE Uart Service
  bleuart.begin();

  // Start BLE Battery Service
  blebas.begin();
  blebas.write(100);

  // Set up and start advertising
  startAdv();
}

void startAdv(void)
{
  // Advertising packet
  Bluefruit.Advertising.addFlags(BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE);
  Bluefruit.Advertising.addTxPower();

  // Include bleuart 128-bit uuid
  Bluefruit.Advertising.addService(bleuart);

  // Secondary Scan Response packet (optional)
  // Since there is no room for 'Name' in Advertising packet
  Bluefruit.ScanResponse.addName();
  
  /* Start Advertising
   * - Enable auto advertising if disconnected
   * - Interval:  fast mode = 20 ms, slow mode = 152.5 ms
   * - Timeout for fast mode is 30 seconds
   * - Start(timeout) with timeout = 0 will advertise forever (until connected)
   * 
   * For recommended advertising interval
   * https://developer.apple.com/library/content/qa/qa1931/_index.html   
   */
  Bluefruit.Advertising.restartOnDisconnect(true);
  Bluefruit.Advertising.setInterval(32, 244);    // in unit of 0.625 ms
  Bluefruit.Advertising.setFastTimeout(30);      // number of seconds in fast mode
  Bluefruit.Advertising.start(0);                // 0 = Don't stop advertising after n seconds  
}

void loop()
{ 
  // Respond to command and forward from BLEUART to HW Serial for Debugging
  while ( bleuart.available() )
  {
    uint8_t ch;
    ch = (uint8_t) bleuart.read();
    Serial.print("Received Command: ");
    Serial.write(ch);
    Serial.println("");
    if(ch == 0x57){
      color=colorRed; 
    }
    else if(ch == 0x58){
      color=colorGreen; 
    } 
    else if(ch == 0x59){
      color=colorBlue;
    } 
    else if(ch == 0x5A){
      color=colorWhite;
    } 
    else if(ch == 0x31){
      FaceMode=1;
    }
    else if(ch == 0x32){
      FaceMode=2;
    }
    else if(ch == 0x33){
      FaceMode=3;
    }
    else if(ch == 0x34){
      FaceMode=4;
    }
    else if(ch == 0x35){
      FaceMode=5;
    }
    else if(ch == 0x36){
      FaceMode=6;
    }
    else if(ch == 0x37){
      FaceMode=7;
    }
    else if(ch == 0x38){
      FaceMode=8;
    }
    else if(ch == 0x39){
      FaceMode=9;
    }
    else if(ch == 0x30){
      FaceMode=0;
    }
    else if(ch == 0x41){
      FaceMode='A';
    }
    else if(ch == 0x42){
      FaceMode='B';
    }
    else if(ch == 0x43){
      FaceMode='C';
    }
    else if(ch == 0x44){
      FaceMode='D';
    }
    else if(ch == 0x45){
      FaceMode='E';
    }
    else if(ch == 0x46){
      FaceMode='F';
    }
    else if(ch == 0x47){
      FaceMode='G';
    }
    else if(ch == 0x48){
      FaceMode='H';
    }
    else if(ch == 0x49){
      FaceMode='I';
    }
    else if(ch == 0x4A){
      FaceMode='J';
    }
    else if(ch == 0x4B){
      FaceMode='K';
    }
    else if(ch == 0x4C){
      FaceMode='L';
    }
    else if(ch == 0x4D){
      FaceMode='M';
    }
    else if(ch == 0x4E){
      FaceMode='N';
      Serial.println("Umbrella LEDs ON");
    }
    else if(ch == 0x2B){
      IncrementBrightness();
    }
    else if(ch == 0x2D){
      DecrementBrightness();
    }
  }

  switch (FaceMode) 
   {
    case 1: Face001(); break; // Draw Face001
    case 2: Face002(); break; // Draw Face002
    case 3: Face003(); break; // Draw Face003
    case 4: Face004(); break; // Draw Face004
    case 5: Face005(); break; // Draw Face005
    case 6: Face006(); break; // Draw Face006
    case 7: Face007(); break; // Draw Face007
    case 8: Face008(); break; // Draw Face008
    case 9: Face009(); break; // Draw Face009
    case 0: Face010(); break; // Draw Face010
    case 'A': Face011(); break; // Draw Face011
    case 'B': Face012(); break; // Draw Face012
    case 'C': Face013(); break; // Draw Face013
    case 'D': Face014(); break; // Draw Face014
    case 'E': Face015(); break; // Draw Face015
    case 'F': Face016(); break; // Draw Face016
    case 'G': Face017(); break; // Draw Face017
    case 'H': Face018(); break; // Draw Face018
    case 'I': Face019(); break; // Draw Face019
    case 'J': Face020(); break; // Draw Face020
    case 'K': Face021(); break; // Draw Face021
    case 'L': Face022(); break; // Draw Face022
    case 'M': Face023(); break; // Draw Face023
    case 'N': Umbrella(); break; // Draw Umbrella Corp logo
   }
}

void connect_callback(uint16_t conn_handle)
{
  char central_name[32] = { 0 };
  Bluefruit.Gap.getPeerName(conn_handle, central_name, sizeof(central_name));

  Serial.print("Connected to ");
  Serial.println(central_name);
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason)
{
  (void) conn_handle;
  (void) reason;

  Serial.println();
  Serial.println("Disconnected");
}

/**
 * RTOS Idle callback is automatically invoked by FreeRTOS
 * when there are no active threads. E.g when loop() calls delay() and
 * there is no bluetooth or hw event. This is the ideal place to handle
 * background data.
 * 
 * NOTE: It is recommended to call waitForEvent() to put MCU into low-power mode
 * at the end of this callback. You could also turn off other Peripherals such as
 * Serial/PWM and turn them back on if wanted
 * 
 * e.g
 * 
 * void rtos_idle_callback(void)
 * {
 *    Serial.stop(); // will lose data when sleeping
 *    waitForEvent();
 *    Serial.begin(115200); 
 * }
 * 
 * NOTE2: If rtos_idle_callback() is not defined at all. Bluefruit will force
 * waitForEvent() to save power. If you don't want MCU to sleep at all, define
 * an rtos_idle_callback() with empty body !
 * 
 * WARNING: This function MUST NOT call any blocking FreeRTOS API 
 * such as delay(), xSemaphoreTake() etc ... for more information
 * http://www.freertos.org/a00016.html
 */
void rtos_idle_callback(void)
{
  // Don't call any other FreeRTOS blocking API()
  // Perform background task(s) here

  // Request CPU to enter low-power mode until an event/interrupt occurs
  waitForEvent();
}

void Face001()
{
  if (Face001RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    lefteye.clear();
    righteye.clear();
    maskedColorWipeLeftEye(color, face001_Left);
    maskedColorWipeRightEye(color, face001_Right);
    FaceRunningCheckClearFunction();
    Face001RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face001BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1; // Set the LEDs status to on
    previousMillis = currentMillis;   // Remember the time
    Serial.println("Face001 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face001_Left);
    maskedColorWipeRightEye(color, face001_Right);
  }
  else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
  {
    ledState = 0; // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
    if(Face001BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face001 LEDs OFF - Blink"); // Debug output
    BlinkFunction("001");
    }
    else
    {
    Face001BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
    }
  }  
}
// Draw Face002
void Face002()
{
  if (Face002RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face002_Left);
    maskedColorWipeRightEye(color, face002_Right);
    FaceRunningCheckClearFunction();
    Face002RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face002BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face002 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face002_Left);
    maskedColorWipeRightEye(color, face002_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face002BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face002 LEDs OFF - Blink"); // Debug output
    BlinkFunction("002");
    }
    else
    {
    Face002BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face003
void Face003()
{
  if (Face003RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face003_Left);
    maskedColorWipeRightEye(color, face003_Right);
    FaceRunningCheckClearFunction();
    Face003RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face003BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face003 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face003_Left);
    maskedColorWipeRightEye(color, face003_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face003BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face003 LEDs OFF - Blink"); // Debug output
    BlinkFunction("003");
    }
    else
    {
    Face003BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}   
// Draw Face004
void Face004()
{
  if (Face004RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face004_Left);
    maskedColorWipeRightEye(color, face004_Right);
    FaceRunningCheckClearFunction();
    Face004RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face004BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face004 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face004_Left);
    maskedColorWipeRightEye(color, face004_Right); 
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face004BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face004 LEDs OFF - Blink"); // Debug output
    BlinkFunction("004");
    }
    else
    {
    Face004BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face005
void Face005()
{
  if (Face005RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face005_Left);
    maskedColorWipeRightEye(color, face005_Right);
    FaceRunningCheckClearFunction();
    Face005RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face005BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face005 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face005_Left);
    maskedColorWipeRightEye(color, face005_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face005BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face005 LEDs OFF - Blink"); // Debug output
    BlinkFunction("005");
    }
    else
    {
    Face005BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face006
void Face006()
{
  if (Face006RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face006_Left);
    maskedColorWipeRightEye(color, face006_Right);
    FaceRunningCheckClearFunction();
    Face006RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face006BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face006 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face006_Left);
    maskedColorWipeRightEye(color, face006_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face006BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face006 LEDs OFF - Blink"); // Debug output
    BlinkFunction("006");
    }
    else
    {
    Face006BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face007
void Face007()
{
  if (Face007RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face007_Left);
    maskedColorWipeRightEye(color, face007_Right);
    FaceRunningCheckClearFunction();
    Face007RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face007BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face007 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face007_Left);
    maskedColorWipeRightEye(color, face007_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face007BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face007 LEDs OFF - Blink"); // Debug output
    BlinkFunction("007");
    }
    else
    {
    Face007BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face008
void Face008()
{
  if (Face008RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face008_Left);
    maskedColorWipeRightEye(color, face008_Right);
    FaceRunningCheckClearFunction();
    Face008RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face008BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face008 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face008_Left);
    maskedColorWipeRightEye(color, face008_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face008BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("008");
    }
    else
    {
    Face008BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face009
void Face009()
{
  if (Face009RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face009_Left);
    maskedColorWipeRightEye(color, face009_Right);
    FaceRunningCheckClearFunction();
    Face009RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face009BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face009 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face009_Left);
    maskedColorWipeRightEye(color, face009_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face009BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("009");
    }
    else
    {
    Face009BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face010
void Face010()
{
  if (Face010RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face010_Left);
    maskedColorWipeRightEye(color, face010_Right);
    FaceRunningCheckClearFunction();
    Face010RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face010BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face010 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face010_Left);
    maskedColorWipeRightEye(color, face010_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face010BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("010");
    }
    else
    {
    Face010BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face011
void Face011()
{
  if (Face011RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face011_Left);
    maskedColorWipeRightEye(color, face011_Right);
    FaceRunningCheckClearFunction();
    Face011RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face011BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face011 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face011_Left);
    maskedColorWipeRightEye(color, face011_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face011BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("011");
    }
    else
    {
    Face011BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face012
void Face012()
{
  if (Face012RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face012_Left);
    maskedColorWipeRightEye(color, face012_Right);
    FaceRunningCheckClearFunction();
    Face012RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face012BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face012 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face012_Left);
    maskedColorWipeRightEye(color, face012_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face012BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("012");
    }
    else
    {
    Face012BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face013
void Face013()
{
  if (Face013RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face013_Left);
    maskedColorWipeRightEye(color, face013_Right);
    FaceRunningCheckClearFunction();
    Face013RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face013BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face013 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face013_Left);
    maskedColorWipeRightEye(color, face013_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face013BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("013");
    }
    else
    {
    Face013BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face014
void Face014()
{
  if (Face014RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face014_Left);
    maskedColorWipeRightEye(color, face014_Right);
    FaceRunningCheckClearFunction();
    Face014RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face014BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face014 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face014_Left);
    maskedColorWipeRightEye(color, face014_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face014BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("014");
    }
    else
    {
    Face014BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face015
void Face015()
{
  if (Face015RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face015_Left);
    maskedColorWipeRightEye(color, face015_Right);
    FaceRunningCheckClearFunction();
    Face015RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face015BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face015 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face015_Left);
    maskedColorWipeRightEye(color, face015_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face015BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    Serial.println("Face015 LEDs OFF - Blink"); // Debug output
    BlinkFunction("015");
    }
    else
    {
    Face015BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face016
void Face016()
{
  if (Face016RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face016_Left);
    maskedColorWipeRightEye(color, face016_Right);
    FaceRunningCheckClearFunction();
    Face016RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face016BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face016 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face016_Left);
    maskedColorWipeRightEye(color, face016_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face016BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("016");
    }
    else
    {
    Face016BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face017
void Face017()
{
  if (Face017RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face017_Left);
    maskedColorWipeRightEye(color, face017_Right);
    // Setting FaceRunningCheck variables for smoother changes
    FaceRunningCheckClearFunction();
    Face017RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face017BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face017 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face017_Left);
    maskedColorWipeRightEye(color, face017_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face017BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("017");
    }
    else
    {
    Face017BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face018
void Face018()
{
  if (Face018RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face018_Left);
    maskedColorWipeRightEye(color, face018_Right);
    // Setting FaceRunningCheck variables for smoother changes
    FaceRunningCheckClearFunction();
    Face018RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face018BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face018 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face018_Left);
    maskedColorWipeRightEye(color, face018_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face018BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("018");
    }
    else
    {
    Face018BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
void Face019()
{
  if (Face019RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face019_Left);
    maskedColorWipeRightEye(color, face019_Right);
    FaceRunningCheckClearFunction();
    Face019RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face019BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face019 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face019_Left);
    maskedColorWipeRightEye(color, face019_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face019BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("019");
    }
    else
    {
    Face019BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face020
void Face020()
{
  if (Face020RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face020_Left);
    maskedColorWipeRightEye(color, face020_Right);
    FaceRunningCheckClearFunction();
    Face020RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face020BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face020 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face020_Left);
    maskedColorWipeRightEye(color, face020_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face020BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("020");
    }
    else
    {
    Face020BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face021
void Face021()
{
  if (Face021RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face021_Left);
    maskedColorWipeRightEye(color, face021_Right);
    FaceRunningCheckClearFunction();
    Face021RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face021BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face021 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face021_Left);
    maskedColorWipeRightEye(color, face021_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face021BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("021");
    }
    else
    {
    Face021BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face022
void Face022()
{
  if (Face022RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face022_Left);
    maskedColorWipeRightEye(color, face022_Right);
    FaceRunningCheckClearFunction();
    Face022RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face022BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face022 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face022_Left);
    maskedColorWipeRightEye(color, face022_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face022BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("022");
    }
    else
    {
    Face022BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}
// Draw Face023
void Face023()
{
  if (Face023RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    Serial.println("Blink Paused");
    maskedColorWipeLeftEye(color, face023_Left);
    maskedColorWipeRightEye(color, face023_Right);
    FaceRunningCheckClearFunction();
    Face023RunningCheck = true;
    // Clearing BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    Face023BlinkCheck = false;
  }
  currentMillis = millis(); // Set variable to see if it's time to change the state of the LEDs
  if ((ledState == 0) && (currentMillis - previousMillis >= OffTime)) // Turn on the LEDs 
  {
    ledState = 1;  // Set the LEDs status to on
    previousMillis = currentMillis; // Remember the time
    Serial.println("Face023 LEDs ON"); // Debug output
    maskedColorWipeLeftEye(color, face023_Left);
    maskedColorWipeRightEye(color, face023_Right);
    }
    else if((ledState == 1) && (currentMillis - previousMillis >= OnTime)) // Blink off the LEDs 
   {
    ledState = 0;  // Set the LEDs status to off
    previousMillis = currentMillis; // Remember the time
     if(Face023BlinkCheck == true) // Checking BlinkCheck for this face to false to prevent an intermittent double flash when changing faces
    {
    BlinkFunction("023");
    }
    else
    {
    Face023BlinkCheck= true; // Setting BlinkCheck to allow blinking
    Serial.println("Blink Resumed"); // Debug output
   } 
   } 
}

// Umbrella Logo
void Umbrella()
{
  DrawUmbrella();
}

void FaceRunningCheckClearFunction()
{
  Face001RunningCheck = false; // Face001
  Face002RunningCheck = false; // Face002
  Face003RunningCheck = false; // Face003
  Face004RunningCheck = false; // Face004
  Face005RunningCheck = false; // Face005
  Face006RunningCheck = false; // Face006 
  Face007RunningCheck = false; // Face007
  Face008RunningCheck = false; // Face008
  Face009RunningCheck = false; // Face009
  Face010RunningCheck = false; // Face010
  Face011RunningCheck = false; // Face011
  Face012RunningCheck = false; // Face012
  Face013RunningCheck = false; // Face013
  Face014RunningCheck = false; // Face014
  Face015RunningCheck = false; // Face015
  Face016RunningCheck = false; // Face016
  Face017RunningCheck = false; // Face017
  Face018RunningCheck = false; // Face018
  Face019RunningCheck = false; // Face019
  Face020RunningCheck = false; // Face020
  Face021RunningCheck = false; // Face021
  Face022RunningCheck = false; // Face022
  Face023RunningCheck = false; // Face023
  Face024RunningCheck = false; // Face024 
}

void IncrementBrightness()
{
  if (EyeBrightness < 255){
    EyeBrightness += 1;
    Serial.println("Incrementing Brightness by 1");
    Serial.print("Brightness:");
    Serial.println(EyeBrightness);
    lefteye.setBrightness(EyeBrightness);
    righteye.setBrightness(EyeBrightness);
    lefteye.show(); 
    righteye.show();
  }
  else if(EyeBrightness = 255){
    Serial.println("Brightness already at maximum");
  }  
}

void DecrementBrightness()
{
  if (EyeBrightness > 1){
    EyeBrightness -= 1;
    Serial.println("Decrementing Brightness by 1");
    Serial.print("Brightness:");
    Serial.println(EyeBrightness);
    lefteye.setBrightness(EyeBrightness);
    righteye.setBrightness(EyeBrightness);
    lefteye.show(); 
    righteye.show();
  }
  else if(EyeBrightness = 1){
    Serial.println("Brightness already at minimum");
  }  
}

void maskedColorWipeLeftEye(uint32_t color, byte mask[][ROW_SIZE])
{
  uint16_t i, j;
 
  for(i=0; i<256; i++) {
    if (drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask)){
      lefteye.setPixelColor(i, color);
    }
    else{
      lefteye.setPixelColor(i, 0);
    }
  }
   
  lefteye.show();
  delay(1);
}

void maskedColorWipeRightEye(uint32_t color, byte mask[][ROW_SIZE])
{
  uint16_t i, j;
 
  for(i=0; i<256; i++) {
    if (drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask)){
      righteye.setPixelColor(i, color);
    }
    else{
      righteye.setPixelColor(i, 0);
    }
  }
   
  righteye.show();
  delay(1);
}

void dualMaskedColorWipeLeftEye(uint32_t color, uint32_t color2, byte mask[][ROW_SIZE], byte mask2[][ROW_SIZE])
{
  uint16_t i, j;
 
  for(i=0; i<256; i++) {
    if (drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask)){
      lefteye.setPixelColor(i, color);
    }
    else if(drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask2)){
      lefteye.setPixelColor(i, color2);
    }
    else{
      lefteye.setPixelColor(i, 0);
    }
  }
   
  lefteye.show();
  delay(1);
}

void dualMaskedColorWipeRightEye(uint32_t color, uint32_t color2, byte mask[][ROW_SIZE], byte mask2[][ROW_SIZE])
{
  uint16_t i, j;
 
  for(i=0; i<256; i++) {
    if (drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask)){
      righteye.setPixelColor(i, color);
    }
    else if(drawGivenMask(i / ROW_SIZE, i % ROW_SIZE, mask2)){
      righteye.setPixelColor(i, color2);
    }
    else{
      righteye.setPixelColor(i, 0);
    }
  }
   
  righteye.show();
  delay(1);
}

void BlinkFunction(String FaceVariable)
{
    Serial.print("Face");
    Serial.print(FaceVariable);
    Serial.println(" LEDs OFF - Blink Function"); // Debug output
    lefteye.setBrightness(0);
    righteye.setBrightness(0);
    lefteye.show(); 
    righteye.show();
    delay(10);
    lefteye.setBrightness(EyeBrightness);
    righteye.setBrightness(EyeBrightness);
    lefteye.show(); 
    righteye.show();
}

void DrawUmbrella()
{
  if (Face024RunningCheck == false) // Check to see if this face is currently running or was recently started - this was added to prevent double blinking when switching faces
  {
    lefteye.clear();
    righteye.clear();
    FaceRunningCheckClearFunction();
    Face024RunningCheck = true;
    dualMaskedColorWipeLeftEye(colorRed, colorWhite, face024_Red, face024_White);
    dualMaskedColorWipeRightEye(colorRed, colorWhite, face024_Red, face024_White);
    /*
    lefteye.setPixelColor(2, colorRed);
    lefteye.setPixelColor(4, colorWhite);
    lefteye.setPixelColor(8, colorRed);
    lefteye.setPixelColor(9, colorRed);
  lefteye.setPixelColor(10, colorRed);
  lefteye.setPixelColor(12, colorWhite);
  lefteye.setPixelColor(13, colorWhite);
  lefteye.setPixelColor(16, colorRed);
  lefteye.setPixelColor(17, colorRed);
  lefteye.setPixelColor(20, colorWhite);
  lefteye.setPixelColor(21, colorWhite);
  lefteye.setPixelColor(22, colorWhite);
  lefteye.setPixelColor(24, colorRed);
  lefteye.setPixelColor(25, colorRed);
  lefteye.setPixelColor(27, colorWhite);
  lefteye.setPixelColor(28, colorWhite);
  lefteye.setPixelColor(29, colorWhite);
  lefteye.setPixelColor(30, colorWhite);
  lefteye.setPixelColor(31, colorWhite);
  lefteye.setPixelColor(32, colorRed);
  lefteye.setPixelColor(34, colorWhite);
  lefteye.setPixelColor(35, colorWhite);
  lefteye.setPixelColor(36, colorWhite);
  lefteye.setPixelColor(40, colorRed);
  lefteye.setPixelColor(42, colorWhite);
  lefteye.setPixelColor(43, colorWhite);
  lefteye.setPixelColor(46, colorRed);
  lefteye.setPixelColor(47, colorRed);
  lefteye.setPixelColor(52, colorRed);
  lefteye.setPixelColor(53, colorRed);
  lefteye.setPixelColor(54, colorRed);
  lefteye.setPixelColor(58, colorRed);
  lefteye.setPixelColor(59, colorRed);
  lefteye.setPixelColor(60, colorRed);
  lefteye.setPixelColor(61, colorRed);
  lefteye.setPixelColor(62, colorRed);
  lefteye.setPixelColor(66, colorRed);
  lefteye.setPixelColor(67, colorRed);
  lefteye.setPixelColor(68, colorRed);
  lefteye.setPixelColor(69, colorRed);
  lefteye.setPixelColor(70, colorRed);
  lefteye.setPixelColor(76, colorRed);
  lefteye.setPixelColor(77, colorRed);
  lefteye.setPixelColor(78, colorRed);
  lefteye.setPixelColor(80, colorRed);
  lefteye.setPixelColor(82, colorWhite);
  lefteye.setPixelColor(83, colorWhite);
  lefteye.setPixelColor(86, colorRed);
  lefteye.setPixelColor(87, colorRed);
  lefteye.setPixelColor(88, colorRed);
  lefteye.setPixelColor(90, colorWhite);
  lefteye.setPixelColor(91, colorWhite);
  lefteye.setPixelColor(92, colorWhite);
  lefteye.setPixelColor(96, colorRed);
  lefteye.setPixelColor(97, colorRed);
  lefteye.setPixelColor(99, colorWhite);
  lefteye.setPixelColor(100, colorWhite);
  lefteye.setPixelColor(101, colorWhite);
  lefteye.setPixelColor(102, colorWhite);
  lefteye.setPixelColor(103, colorWhite);
  lefteye.setPixelColor(104, colorRed);
  lefteye.setPixelColor(105, colorRed);
  lefteye.setPixelColor(108, colorWhite);
  lefteye.setPixelColor(109, colorWhite);
  lefteye.setPixelColor(110, colorWhite);
  lefteye.setPixelColor(112, colorRed);
  lefteye.setPixelColor(113, colorRed);
  lefteye.setPixelColor(114, colorRed);
  lefteye.setPixelColor(116, colorWhite);
  lefteye.setPixelColor(117, colorWhite);
  lefteye.setPixelColor(122, colorRed);
  lefteye.setPixelColor(124, colorWhite);
  lefteye.setPixelColor(130, colorRed);
  lefteye.setPixelColor(132, colorWhite);
  lefteye.setPixelColor(136, colorRed);
  lefteye.setPixelColor(137, colorRed);
  lefteye.setPixelColor(138, colorRed);
  lefteye.setPixelColor(140, colorWhite);
  lefteye.setPixelColor(141, colorWhite);
  lefteye.setPixelColor(144, colorRed);
  lefteye.setPixelColor(145, colorRed);
  lefteye.setPixelColor(148, colorWhite);
  lefteye.setPixelColor(149, colorWhite);
  lefteye.setPixelColor(150, colorWhite);
  lefteye.setPixelColor(152, colorRed);
  lefteye.setPixelColor(153, colorRed);
  lefteye.setPixelColor(155, colorWhite);
  lefteye.setPixelColor(156, colorWhite);
  lefteye.setPixelColor(157, colorWhite);
  lefteye.setPixelColor(158, colorWhite);
  lefteye.setPixelColor(159, colorWhite);
  lefteye.setPixelColor(160, colorRed);
  lefteye.setPixelColor(162, colorWhite);
  lefteye.setPixelColor(163, colorWhite);
  lefteye.setPixelColor(164, colorWhite);
  lefteye.setPixelColor(168, colorRed);
  lefteye.setPixelColor(174, colorRed);
  lefteye.setPixelColor(175, colorRed);
  lefteye.setPixelColor(180, colorRed);
  lefteye.setPixelColor(181, colorRed);
  lefteye.setPixelColor(182, colorRed);
  lefteye.setPixelColor(186, colorRed);
  lefteye.setPixelColor(187, colorRed);
  lefteye.setPixelColor(188, colorRed);
  lefteye.setPixelColor(189, colorRed);
  lefteye.setPixelColor(190, colorRed);
  lefteye.setPixelColor(194, colorRed);
  lefteye.setPixelColor(195, colorRed);
  lefteye.setPixelColor(196, colorRed);
  lefteye.setPixelColor(197, colorRed);
  lefteye.setPixelColor(198, colorRed);
  lefteye.setPixelColor(204, colorRed);
  lefteye.setPixelColor(205, colorRed);
  lefteye.setPixelColor(206, colorRed);
  lefteye.setPixelColor(208, colorRed);
  lefteye.setPixelColor(210, colorWhite);
  lefteye.setPixelColor(211, colorWhite);
  lefteye.setPixelColor(214, colorRed);
  lefteye.setPixelColor(215, colorRed);
  lefteye.setPixelColor(216, colorRed);
  lefteye.setPixelColor(218, colorWhite);
  lefteye.setPixelColor(219, colorWhite);
  lefteye.setPixelColor(220, colorWhite);
  lefteye.setPixelColor(224, colorRed);
  lefteye.setPixelColor(225, colorRed);
  lefteye.setPixelColor(227, colorWhite);
  lefteye.setPixelColor(228, colorWhite);
  lefteye.setPixelColor(229, colorWhite);
  lefteye.setPixelColor(230, colorWhite);
  lefteye.setPixelColor(231, colorWhite);
  lefteye.setPixelColor(232, colorRed);
  lefteye.setPixelColor(233, colorRed);
  lefteye.setPixelColor(236, colorWhite);
  lefteye.setPixelColor(237, colorWhite);
  lefteye.setPixelColor(238, colorWhite);
  lefteye.setPixelColor(240, colorRed);
  lefteye.setPixelColor(241, colorRed);
  lefteye.setPixelColor(242, colorRed);
  lefteye.setPixelColor(244, colorWhite);
  lefteye.setPixelColor(245, colorWhite);
  lefteye.setPixelColor(250, colorRed);
  lefteye.setPixelColor(252, colorWhite);
  righteye.setPixelColor(3, colorWhite);
  righteye.setPixelColor(5, colorRed);
  righteye.setPixelColor(10, colorWhite);
  righteye.setPixelColor(11, colorWhite);
  righteye.setPixelColor(13, colorRed);
  righteye.setPixelColor(14, colorRed);
  righteye.setPixelColor(15, colorRed);
  righteye.setPixelColor(17, colorWhite);
  righteye.setPixelColor(18, colorWhite);
  righteye.setPixelColor(19, colorWhite);
  righteye.setPixelColor(22, colorRed);
  righteye.setPixelColor(23, colorRed);
  righteye.setPixelColor(24, colorWhite);
  righteye.setPixelColor(25, colorWhite);
  righteye.setPixelColor(26, colorWhite);
  righteye.setPixelColor(27, colorWhite);
  righteye.setPixelColor(28, colorWhite);
  righteye.setPixelColor(30, colorRed);
  righteye.setPixelColor(31, colorRed);
  righteye.setPixelColor(35, colorWhite);
  righteye.setPixelColor(36, colorWhite);
  righteye.setPixelColor(37, colorWhite);
  righteye.setPixelColor(39, colorRed);
  righteye.setPixelColor(40, colorRed);
  righteye.setPixelColor(41, colorRed);
  righteye.setPixelColor(44, colorWhite);
  righteye.setPixelColor(45, colorWhite);
  righteye.setPixelColor(47, colorRed);
  righteye.setPixelColor(49, colorRed);
  righteye.setPixelColor(50, colorRed);
  righteye.setPixelColor(51, colorRed);
  righteye.setPixelColor(57, colorRed);
  righteye.setPixelColor(58, colorRed);
  righteye.setPixelColor(59, colorRed);
  righteye.setPixelColor(60, colorRed);
  righteye.setPixelColor(61, colorRed);
  righteye.setPixelColor(65, colorRed);
  righteye.setPixelColor(66, colorRed);
  righteye.setPixelColor(67, colorRed);
  righteye.setPixelColor(68, colorRed);
  righteye.setPixelColor(69, colorRed);
  righteye.setPixelColor(73, colorRed);
  righteye.setPixelColor(74, colorRed);
  righteye.setPixelColor(75, colorRed);
  righteye.setPixelColor(80, colorRed);
  righteye.setPixelColor(81, colorRed);
  righteye.setPixelColor(84, colorWhite);
  righteye.setPixelColor(85, colorWhite);
  righteye.setPixelColor(87, colorRed);
  righteye.setPixelColor(91, colorWhite);
  righteye.setPixelColor(92, colorWhite);
  righteye.setPixelColor(93, colorWhite);
  righteye.setPixelColor(95, colorRed);
  righteye.setPixelColor(96, colorWhite);
  righteye.setPixelColor(97, colorWhite);
  righteye.setPixelColor(98, colorWhite);
  righteye.setPixelColor(99, colorWhite);
  righteye.setPixelColor(100, colorWhite);
  righteye.setPixelColor(102, colorRed);
  righteye.setPixelColor(103, colorRed);
  righteye.setPixelColor(105, colorWhite);
  righteye.setPixelColor(106, colorWhite);
  righteye.setPixelColor(107, colorWhite);
  righteye.setPixelColor(110, colorRed);
  righteye.setPixelColor(111, colorRed);
  righteye.setPixelColor(114, colorWhite);
  righteye.setPixelColor(115, colorWhite);
  righteye.setPixelColor(117, colorRed);
  righteye.setPixelColor(118, colorRed);
  righteye.setPixelColor(119, colorRed);
  righteye.setPixelColor(123, colorWhite);
  righteye.setPixelColor(125, colorRed);
  righteye.setPixelColor(131, colorWhite);
  righteye.setPixelColor(133, colorRed);
  righteye.setPixelColor(138, colorWhite);
  righteye.setPixelColor(139, colorWhite);
  righteye.setPixelColor(141, colorRed);
  righteye.setPixelColor(142, colorRed);
  righteye.setPixelColor(143, colorRed);
  righteye.setPixelColor(145, colorWhite);
  righteye.setPixelColor(146, colorWhite);
  righteye.setPixelColor(147, colorWhite);
  righteye.setPixelColor(150, colorRed);
  righteye.setPixelColor(151, colorRed);
  righteye.setPixelColor(152, colorWhite);
  righteye.setPixelColor(153, colorWhite);
  righteye.setPixelColor(154, colorWhite);
  righteye.setPixelColor(155, colorWhite);
  righteye.setPixelColor(156, colorWhite);
  righteye.setPixelColor(158, colorRed);
  righteye.setPixelColor(159, colorRed);
  righteye.setPixelColor(163, colorWhite);
  righteye.setPixelColor(164, colorWhite);
  righteye.setPixelColor(165, colorWhite);
  righteye.setPixelColor(167, colorRed);
  righteye.setPixelColor(168, colorRed);
  righteye.setPixelColor(169, colorRed);
  righteye.setPixelColor(172, colorWhite);
  righteye.setPixelColor(173, colorWhite);
  righteye.setPixelColor(175, colorRed);
  righteye.setPixelColor(177, colorRed);
  righteye.setPixelColor(178, colorRed);
  righteye.setPixelColor(179, colorRed);
  righteye.setPixelColor(185, colorRed);
  righteye.setPixelColor(186, colorRed);
  righteye.setPixelColor(187, colorRed);
  righteye.setPixelColor(188, colorRed);
  righteye.setPixelColor(189, colorRed);
  righteye.setPixelColor(193, colorRed);
  righteye.setPixelColor(194, colorRed);
  righteye.setPixelColor(195, colorRed);
  righteye.setPixelColor(196, colorRed);
  righteye.setPixelColor(197, colorRed);
  righteye.setPixelColor(201, colorRed);
  righteye.setPixelColor(202, colorRed);
  righteye.setPixelColor(203, colorRed);
  righteye.setPixelColor(208, colorRed);
  righteye.setPixelColor(209, colorRed);
  righteye.setPixelColor(212, colorWhite);
  righteye.setPixelColor(213, colorWhite);
  righteye.setPixelColor(215, colorRed);
  righteye.setPixelColor(219, colorWhite);
  righteye.setPixelColor(220, colorWhite);
  righteye.setPixelColor(221, colorWhite);
  righteye.setPixelColor(223, colorRed);
  righteye.setPixelColor(224, colorWhite);
  righteye.setPixelColor(225, colorWhite);
  righteye.setPixelColor(226, colorWhite);
  righteye.setPixelColor(227, colorWhite);
  righteye.setPixelColor(228, colorWhite);
  righteye.setPixelColor(230, colorRed);
  righteye.setPixelColor(231, colorRed);
  righteye.setPixelColor(233, colorWhite);
  righteye.setPixelColor(234, colorWhite);
  righteye.setPixelColor(235, colorWhite);
  righteye.setPixelColor(238, colorRed);
  righteye.setPixelColor(239, colorRed);
  righteye.setPixelColor(242, colorWhite);
  righteye.setPixelColor(243, colorWhite);
  righteye.setPixelColor(245, colorRed);
  righteye.setPixelColor(246, colorRed);
  righteye.setPixelColor(247, colorRed);
  righteye.setPixelColor(251, colorWhite);
  righteye.setPixelColor(253, colorRed);
  righteye.show();
  lefteye.show();
  */
  }
  delay(10);  
}
